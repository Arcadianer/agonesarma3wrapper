/*
 * sdk.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.SdkEmpty;
import io.swagger.client.model.SdkGameServer;
import io.swagger.client.model.SdkKeyValue;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SdkApi
 */
@Ignore
public class SdkApiTest {

    private final SdkApi api = new SdkApi();

    
    /**
     * Retrieve the current GameServer data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGameServerTest() throws ApiException {
        SdkGameServer response = api.getGameServer();

        // TODO: test validations
    }
    
    /**
     * Send a Empty every d Duration to declare that this GameSever is healthy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthTest() throws ApiException {
        SdkEmpty body = null;
        SdkEmpty response = api.health(body);

        // TODO: test validations
    }
    
    /**
     * Call when the GameServer is ready
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readyTest() throws ApiException {
        SdkEmpty body = null;
        SdkEmpty response = api.ready(body);

        // TODO: test validations
    }
    
    /**
     * Apply a Annotation to the backing GameServer metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnnotationTest() throws ApiException {
        SdkKeyValue body = null;
        SdkEmpty response = api.setAnnotation(body);

        // TODO: test validations
    }
    
    /**
     * Apply a Label to the backing GameServer metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setLabelTest() throws ApiException {
        SdkKeyValue body = null;
        SdkEmpty response = api.setLabel(body);

        // TODO: test validations
    }
    
    /**
     * Call when the GameServer is shutting down
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shutdownTest() throws ApiException {
        SdkEmpty body = null;
        SdkEmpty response = api.shutdown(body);

        // TODO: test validations
    }
    
    /**
     * Send GameServer details whenever the GameServer is updated
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void watchGameServerTest() throws ApiException {
        SdkGameServer response = api.watchGameServer();

        // TODO: test validations
    }
    
}
